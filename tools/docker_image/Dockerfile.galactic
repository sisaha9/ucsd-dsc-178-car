ARG BASE_IMAGE=nvcr.io/nvidia/l4t-ml:r32.6.1-py3
ARG ROS_DISTRO=galactic
ARG UBUNTU_CODENAME=focal

FROM ${BASE_IMAGE}
LABEL maintainer="Siddharth Saha <omadityasiddharth123@gmail.com>"

ENV DEBIAN_FRONTEND=noninteractive
ENV SHELL /bin/bash
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
SHELL ["/bin/bash", "-c"] 

WORKDIR /tmp

# change the locale from POSIX to UTF-8
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8


# 
# add the ROS deb repo to the apt sources list
#
RUN apt update && \
    apt install -y --no-install-recommends \
		curl \
		wget \
		gnupg2 \
		lsb-release \
		ca-certificates \
        vim \
        apt-utils \
    && rm -rf /var/lib/apt/lists/* \
    && apt clean

RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null


# 
# install development packages
#
RUN apt update && \
    apt install -y --no-install-recommends \
		build-essential \
		cmake \
		git \
		libbullet-dev \
		libpython3-dev \
		python3-colcon-common-extensions \
        python3-rosdistro \
        python3-rospkg \
        python3-rosdep-modules \
        python3-catkin-pkg \
		python3-flake8 \
		python3-pip \
		python3-pytest-cov \
		python3-rosdep \
		python3-setuptools \
		python3-vcstool \
		python3-rosinstall-generator \
		libasio-dev \
		libtinyxml2-dev \
        libpcl-dev \
        libfreetype6-dev \
        libfreetype \
        libboost-python-dev \
        qt5-default \
        ogre-1.9-tools \
        libxaw \
		libcunit1-dev \
		libgazebo9-dev \
		gazebo9 \
		gazebo9-common \
		gazebo9-plugin-base \
    && rm -rf /var/lib/apt/lists/* \
    && apt clean

# Ensure we have the latest certificates installed before calling apt
RUN apt update ; apt install ca-certificates
RUN python3 -m pip install --upgrade pip

# install some pip packages needed for testing
RUN python3 -m pip install -U \
		argcomplete \
		flake8-blind-except \
		flake8-builtins \
		flake8-class-newline \
		flake8-comprehensions \
		flake8-deprecated \
		flake8-docstrings \
		flake8-import-order \
		flake8-quotes \
		pytest-repeat \
		pytest-rerunfailures \
		pytest \
        lark \
        protobuf==3.3.0 \
        seaborn \
        matplotlib \
        pyyaml

# 
# install OpenCV (with CUDA)
#

ARG OPENCV_VERSION="4.5.5"
ARG OPENCV_DEB=OpenCV-${OPENCV_VERSION}-aarch64.tar.gz

RUN mkdir opencv

COPY OPENCV_DEB opencv/OPENCV_DEB

RUN apt purge -y '*opencv*' || echo "previous OpenCV installation not found" && \
    cd opencv && \
    tar -xzvf ${OPENCV_DEB} && \
    dpkg -i --force-depends *.deb && \
    apt update && \
    apt install -y -f --no-install-recommends && \
    dpkg -i *.deb && \
    rm -rf /var/lib/apt/lists/* && \
    apt clean && \
    cd ../ && \
    rm -rf opencv && \
    cp -r /usr/include/opencv4 /usr/local/include/opencv4 && \
    cp -r /usr/lib/python3.6/dist-packages/cv2 /usr/local/lib/python3.6/dist-packages/cv2
    
    
    
# 
# upgrade cmake - https://stackoverflow.com/a/56690743
# this is needed to build some of the ROS2 packages
#
RUN apt update && \
    apt install -y --no-install-recommends \
		  software-properties-common \
		  apt-transport-https \
		  ca-certificates \
		  gnupg \
    && rm -rf /var/lib/apt/lists/* \
    && apt clean
		  	  
RUN wget -qO - https://apt.kitware.com/keys/kitware-archive-latest.asc | apt-key add - && \
    apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' && \
    apt update && \
    apt install -y --no-install-recommends --only-upgrade \
            cmake \
    && rm -rf /var/lib/apt/lists/* \
    && apt clean
    
RUN cmake --version

# Build PyQt5 and PyQt5-sip from source to fix qt_gui_cpp build issue
# https://github.com/ros2/ros2/issues/623
  
RUN python3 -m pip uninstall PyQt5 && \
    wget https://sourceforge.net/projects/pyqt/files/sip/sip-4.19.13/sip-4.19.13.tar.gz && \
    wget https://sourceforge.net/projects/pyqt/files/PyQt5/PyQt-5.11.3/PyQt5_gpl-5.11.3.tar.gz && \
    tar xzf sip-4.19.13.tar.gz && \
    cd sip-4.19.13 && \
    python3 ./configure.py && \
    make -j7 && \
    make install && \
    cd ${ROS_ROOT} && \
    tar xzf PyQt5_gpl-5.11.3.tar.gz && \
    cd PyQt5_gpl-5.11.3 && \
    python3 ./configure.py --sip /usr/bin/sip && \
    make -j7 && \
    make install

RUN cd ${ROS_ROOT} && \
    git clone --branch yaml-cpp-0.6.0 https://github.com/jbeder/yaml-cpp yaml-cpp-0.6 && \
    cd yaml-cpp-0.6 && \
    mkdir build && \
    cd build && \
    cmake -DBUILD_SHARED_LIBS=ON .. && \
    make -j7 && \
    cp libyaml-cpp.so.0.6.0 /usr/lib/aarch64-linux-gnu/ && \
    cp sudo ln -s /usr/lib/aarch64-linux-gnu/libyaml-cpp.so.0.6.0 /usr/lib/aarch64-linux-gnu/libyaml-cpp.so.0.6 

# add this to make sdl_vendor build properly
RUN cd ${ROS_ROOT} && \   
    wget https://www.libsdl.org/release/SDL2-2.0.12.tar.gz && \
    tar xf SDL2-2.0.12.tar.gz && \
    cd SDL2-2.0.12 && \
    ./autogen.sh && \
    ./configure && \
    make -j7 && \
    make install && \
    ldconfig

RUN cd ${ROS_ROOT} && \
    git clone https://github.com/harfbuzz/harfbuzz.git && \
    cd harfbuzz && \
    ./autogen.sh && \
    ./configure && \
    make -j7 && \
    cp ./src/.libs/libharfbuzz.so /usr/lib/aarch64-linux-gnu/libharfbuzz.so && \
    ldconfig

# 
# download/build ROS from source
#
RUN mkdir -p ${ROS_ROOT}/src && \
    cd ${ROS_ROOT} && \
    
    # https://answers.ros.org/question/325245/minimal-ros2-installation/?answer=325249#post-id-325249
    rosinstall_generator --deps --rosdistro ${ROS_DISTRO} ${ROS_PKG} \
		launch_xml \
		launch_yaml \
		launch_testing \
		launch_testing_ament_cmake \
		demo_nodes_cpp \
		demo_nodes_py \
		example_interfaces \
		camera_calibration_parsers \
		camera_info_manager \
		cv_bridge \
		v4l2_camera \
		vision_opencv \
		vision_msgs \
		image_geometry \
		image_pipeline \
		image_transport \
		compressed_image_transport \
		compressed_depth_image_transport \
		> ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \
    cat ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \
    vcs import src < ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \

    # install dependencies using rosdep
    apt update && \
    cd ${ROS_ROOT} && \
    rosdep init && \
    rosdep update && \
    rosdep install -y \
    	  --ignore-src \
       --from-paths src \
	  --rosdistro ${ROS_DISTRO} \
	  --skip-keys "libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv" && \
    rm -rf /var/lib/apt/lists/* && \
    apt clean && \

    # build it!
    colcon build \
        --merge-install \
        --cmake-args -DCMAKE_BUILD_TYPE=Release && \
    
    # remove build files
    rm -rf ${ROS_ROOT}/src && \
    rm -rf ${ROS_ROOT}/logs && \
    rm -rf ${ROS_ROOT}/build && \
    rm ${ROS_ROOT}/*.rosinstall
    
    
#
# setup entrypoint
#
COPY ./packages/ros_entrypoint.sh /ros_entrypoint.sh

RUN sed -i \
    's/ros_env_setup="\/opt\/ros\/$ROS_DISTRO\/setup.bash"/ros_env_setup="${ROS_ROOT}\/install\/setup.bash"/g' \
    /ros_entrypoint.sh && \
    cat /ros_entrypoint.sh

RUN echo 'source ${ROS_ROOT}/install/setup.bash' >> /root/.bashrc

ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]
WORKDIR /

